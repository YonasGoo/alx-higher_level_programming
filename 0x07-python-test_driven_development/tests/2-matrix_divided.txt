# Inside test_matrix_divided.txt
# Test case: Testing matrix_divided function

>>> def matrix_divided(matrix, div):
...     # Your implementation of matrix_divided function here
...     if not all(isinstance(row, list) for row in matrix) or not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):
...         raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
...     if any(len(row) != len(matrix[0]) for row in matrix):
...         raise TypeError("Each row of the matrix must have the same size")
...     if not isinstance(div, (int, float)):
...         raise TypeError("div must be a number")
...     if div == 0:
...         raise ZeroDivisionError("division by zero")
...     return [[round(num / div, 2) for num in row] for row in matrix]

# Test scenario: Dividing a matrix by a number
>>> matrix_divided([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 5)
[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]

# Test scenario: Dividing a matrix by a decimal number
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 0.5)
[[3.0, 5.0], [7.0, 9.0]]

# Test scenario: Dividing a matrix by zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test scenario: Dividing a non-matrix
>>> matrix_divided([1, 2, 3], 5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test scenario: Dividing a matrix with rows of different sizes
>>> matrix_divided([[1, 2], [3, 4, 5], [6, 7, 8]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size
